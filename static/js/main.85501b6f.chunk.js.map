{"version":3,"sources":["components/nodeHistory/plotHistory.js","components/utils/index.js","components/hooks/index.js","components/nodeEditor/transitionSlider.js","components/nodeEditor/index.js","components/markov-chain/index.js","components/home/index.js","components/about/index.js","components/index.js","serviceWorker.js","index.js","components/markov-chain/nodeCanvasObject.js"],"names":["History","node","width","height","data","visited","map","timesVisited","step","name","toString","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","EPS","multiplyMatrixVec","a","x","multiplyMatrix","y","b","length","Error","result","Array","fill","i","j","k","matrixExp","useMarkovChain","useState","Node","nodes","setNodes","currentNode","setCurrentNode","initialNode","setInitialNode","totalSteps","useMemo","total","forEach","slice","useEffect","transitionMatrix","transpose","reduce","acc","push","transitionProbabilities","initial","expected","equilibrium","equal","equilibriumExists","resetIteration","useCallback","newNodes","label","addNode","addedNodeLabel","newNode","iterate","randVal","Math","random","prefSum","probabilities","tryUpdateNodeProbabilities","newProbabilities","force","sum","accumulator","currentValue","removeNode","pop","p","test","from","keys","probs","next","parseInt","prev","window","runTest","initialVisited","this","TransitionSlider","probability","onChange","handleBlur","handleSliderChange","event","newValue","handleTextChange","target","value","Grid","container","spacing","alignItems","item","xs","Slider","aria-labelledby","min","max","TextField","variant","onBlur","inputProps","useStyles","makeStyles","theme","root","display","flexDirection","paddingLeft","paddingRight","subtitle","marginBottom","inputsContainer","buttonsContainer","marginTop","NodeEditor","toggleDrawer","classes","isDialogOpen","setDialogIsOpen","setTransitionProbabilities","toggleDialog","handleDialogConfirm","handleConfirm","handleProbabilitiesChange","Object","entries","newTransitionProbabilities","parseFloat","Fragment","className","key","Button","onClick","Dialog","open","onClose","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","color","autoFocus","float","padding","graphContainer","sliderContainer","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","getModalStyle","transform","MarkovChain","markovChainState","selectedNode","setSelectedNode","setOpen","openModal","setOpenModal","runTimeout","setRunTimeout","runSpeed","setRunSpeed","toggleModal","React","modalStyle","onNodeClick","onNodeRightClick","handleOpenModal","linkWidth","link","linkColor","nodeEditorProps","historyProps","isCurrentNode","nodesPosition","links","_","flatten","source","filter","edge","runStepRef","useRef","runStep","setTimeout","current","onClickRun","isNull","onClickStop","clearTimeout","modalBody","style","Paper","graphData","nodeLabel","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","nodeCanvasObject","renderNodeCanvas","d3VelocityDecay","align","ButtonGroup","aria-label","Drawer","anchor","Modal","tableContainer","table","minWidth","Home","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","scope","toFixed","About","darkTheme","createMuiTheme","App","ThemeProvider","CssBaseline","Link","RouterLink","to","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","ctx","globalScale","font","fillStyle","beginPath","arc","PI","lineWidth","strokeStyle","textAlign","textBaseline","fillText"],"mappings":"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","file":"static/js/main.85501b6f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nexport default function History({ node }) {\r\n\r\n  const data = (node) => {\r\n    const visitedArray = node.visited;\r\n    return visitedArray.map((timesVisited, step) => {\r\n      return {\r\n        name: step.toString(),\r\n        \"visits/# of steps\": timesVisited / (step === 0 ? 1 : step),\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <LineChart\r\n      width={500}\r\n      height={300}\r\n      data={data(node)}\r\n      margin={{\r\n        top: 5, right: 30, left: 20, bottom: 5,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey=\"visits/# of steps\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n    </LineChart>\r\n  );\r\n}","export const EPS = 1e-6;\r\nexport const INF = 1e6;\r\n\r\nexport function multiplyMatrixVec(a, x) {\r\n  const b = x.map(y => [y]);\r\n  return multiplyMatrix(a, b).map(x => x[0]);\r\n}\r\n\r\nexport function multiplyMatrix(a, b) {\r\n  if (a[0].length !== b.length) {\r\n    throw Error(\"Algo de errado nao esta certo\");\r\n  }\r\n\r\n  const result = Array(a.length)\r\n    .fill([])\r\n    .map(() => Array(b[0].length).fill(0));\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    for (let j = 0; j < b[0].length; j++) {\r\n      for (let k = 0; k < b.length; k++) {\r\n        result[i][j] += a[i][k] * b[k][j];\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function matrixExp(a, b) {\r\n  if (a.length === 0 || a.length !== a[0].length) {\r\n    throw Error(\"Algo de errado nao esta certo, so q na exponencial\");\r\n  }\r\n\r\n  const length = a.length;\r\n  let result = Array(length)\r\n    .fill([])\r\n    .map(() => Array(length).fill(0));\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    result[i][i] = 1;\r\n  }\r\n\r\n  while (b > 0) {\r\n    if (b % 2 === 0) {\r\n      a = multiplyMatrix(a, a);\r\n      b /= 2;\r\n      continue;\r\n    }\r\n    result = multiplyMatrix(result, a);\r\n    b--;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function transpose(a) {\r\n  if (a.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const result = Array(a[0].length)\r\n    .fill([])\r\n    .map(() => Array(a.length).fill(0));\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    for (let j = 0; j < a[0].length; j++) {\r\n      result[j][i] = a[i][j];\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function equal(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    if (a[i] + EPS < b[i] && a[i] - EPS > b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { useState, useCallback, useMemo, useEffect } from 'react';\r\n\r\nimport { matrixExp, transpose, EPS, INF, equal, multiplyMatrixVec } from '../utils';\r\n\r\nexport function useMarkovChain() {\r\n  const [nodes, setNodes] = useState([new Node(0, 1)]);\r\n  const [currentNode, setCurrentNode] = useState(0);\r\n  const [initialNode, setInitialNode] = useState(0);\r\n\r\n  const totalSteps = useMemo(() => {\r\n    let total = 0;\r\n    nodes.forEach(node => {\r\n      total += node.visited.slice(-1)[0];\r\n    });\r\n    return total - 1;\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    if (totalSteps === 0) {\r\n      setInitialNode(currentNode);\r\n    }\r\n  }, [totalSteps, initialNode, currentNode]);\r\n\r\n  const [expected, equilibrium, equilibriumExists] = useMemo(() => {\r\n    // Calc Matrix\r\n    const transitionMatrix = transpose(nodes\r\n      .reduce((acc, node) => {\r\n        acc.push(node.transitionProbabilities);\r\n        return acc;\r\n      }, [])\r\n    );\r\n\r\n    const initial = Array(nodes.length).fill(0);\r\n    initial[initialNode] = 1;\r\n\r\n    const expected = multiplyMatrixVec(matrixExp(transitionMatrix, totalSteps), initial);\r\n    const equilibrium = multiplyMatrixVec(matrixExp(transitionMatrix, INF), initial);\r\n    const equilibriumExists = equal(equilibrium, multiplyMatrixVec(transitionMatrix, equilibrium));\r\n\r\n    return [expected, equilibrium, equilibriumExists];\r\n  }, [nodes, totalSteps, initialNode]);\r\n\r\n  const resetIteration = useCallback(() => {\r\n    const newNodes = [...nodes].map(node => (\r\n      { ...node, visited: [(node.label === \"0\" ? 1 : 0)] }\r\n    ));\r\n    setNodes(newNodes);\r\n    setCurrentNode(0);\r\n  }, [nodes]);\r\n\r\n  const addNode = useCallback(() => {\r\n    const addedNodeLabel = nodes.length;\r\n    const newNodes = [...nodes]\r\n      .map(node => {\r\n        const newNode = { ...node, transitionProbabilities: [...node.transitionProbabilities] }\r\n        newNode.transitionProbabilities[addedNodeLabel] = 0;\r\n        newNode.visited = [(newNode.label === \"0\" ? 1 : 0)];\r\n        return newNode;\r\n      });\r\n\r\n    newNodes.push(new Node(addedNodeLabel));\r\n    setCurrentNode(0);\r\n    setNodes(newNodes);\r\n  }, [nodes]);\r\n\r\n  const iterate = useCallback(() => {\r\n    const randVal = Math.random();\r\n    let prefSum = 0;\r\n\r\n    const probabilities = nodes[currentNode].transitionProbabilities;\r\n    for (const label in probabilities) {\r\n      prefSum += probabilities[label];\r\n      if (prefSum > randVal - EPS) {\r\n        const newNodes = [...nodes].map(node => {\r\n          const newNode = { ...node };\r\n          newNode.visited.push(newNode.visited.slice(-1)[0] + (newNode.label === label));\r\n          return newNode;\r\n        });\r\n\r\n        setNodes(newNodes);\r\n        setCurrentNode(label);\r\n        return;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Iterate couldn't find the next node\");\r\n  }, [nodes, currentNode]);\r\n\r\n  const tryUpdateNodeProbabilities = useCallback((label, newProbabilities, force = false) => {\r\n    const newNodes = [...nodes];\r\n\r\n    // Normalizing Step\r\n    let sum = newProbabilities.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n    if (force) {\r\n      for (const label in newProbabilities) {\r\n        newProbabilities[label] /= sum;\r\n      }\r\n      sum = 1;\r\n    }\r\n\r\n    const newNode = { ...newNodes[label] };\r\n    newNode.transitionProbabilities = newProbabilities;\r\n    newNodes[label] = newNode;\r\n\r\n    if (sum + EPS < 1 || sum - EPS > 1) {\r\n      return false;\r\n    }\r\n\r\n    setNodes(newNodes);\r\n    return true;\r\n  }, [nodes]);\r\n\r\n  const removeNode = useCallback(() => {\r\n    if (nodes.length === 1) {\r\n      return;\r\n    }\r\n    setCurrentNode(0);\r\n\r\n    const newNodes = nodes.slice(0, -1)\r\n      .map(node => {\r\n        const newNode = { ...node };\r\n        let transitionProbabilities = [...node.transitionProbabilities];\r\n        transitionProbabilities.pop();\r\n\r\n        let sum = transitionProbabilities.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        if (sum + EPS < 1 || sum - EPS > 1) {\r\n          if (sum === 0) {\r\n            transitionProbabilities[newNode.label] = 1;\r\n            sum = 1;\r\n          }\r\n          transitionProbabilities = transitionProbabilities.map(p => p /= sum);\r\n        }\r\n\r\n        newNode.transitionProbabilities = transitionProbabilities;\r\n        newNode.visited = [newNode.label === \"0\" ? 1 : 0];\r\n        return newNode;\r\n      });\r\n\r\n    setNodes(newNodes);\r\n  }, [nodes]);\r\n\r\n  const test = useCallback(() => {\r\n    const length = 5;\r\n    const newNodes = Array\r\n      .from(Array(length).keys())\r\n      .map(label => {\r\n        const node = new Node(label, (label === \"0\" ? 1 : 0));\r\n        const probs = Array(length).fill(0);\r\n        const next = (parseInt(node.label) + 1) % length;\r\n        const prev = (parseInt(node.label) - 1 + length) % length;\r\n\r\n        probs[next] = 0.5;\r\n        probs[prev] = 0.5;\r\n        node.transitionProbabilities = probs;\r\n\r\n        return node;\r\n      });\r\n\r\n    setNodes(newNodes);\r\n  }, []);\r\n  window.runTest = test;\r\n\r\n  return {\r\n    totalSteps,\r\n    nodes,\r\n    currentNode,\r\n    expected,\r\n    equilibrium,\r\n    equilibriumExists,\r\n    resetIteration,\r\n    setCurrentNode,\r\n    addNode,\r\n    removeNode,\r\n    iterate,\r\n    test,\r\n    tryUpdateNodeProbabilities,\r\n  };\r\n}\r\n\r\nclass Node {\r\n  constructor(label, initialVisited = 0) {\r\n    this.label = label.toString();\r\n    this.visited = [initialVisited];\r\n    this.transitionProbabilities = new Array(label + 1).fill(0);\r\n    this.transitionProbabilities[label] = 1;\r\n  }\r\n}","import React, { useCallback } from 'react';\r\nimport {\r\n  Grid,\r\n  Slider,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nfunction TransitionSlider({ label, probability, onChange }) {\r\n  const handleBlur = useCallback(() => {\r\n    if (probability < 0) {\r\n      onChange(0);\r\n    } else if (probability > 1) {\r\n      onChange(1);\r\n    }\r\n  }, [probability, onChange]);\r\n\r\n  const handleSliderChange = useCallback((event, newValue) => onChange(newValue), [onChange]);\r\n  const handleTextChange = useCallback(event => onChange(event.target.value), [onChange]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Node {label}</p>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs>\r\n          <Slider\r\n            value={probability}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            step={0.01}\r\n            min={0}\r\n            max={1}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            value={probability}\r\n            variant=\"outlined\"\r\n            onChange={handleTextChange}\r\n            onBlur={handleBlur}\r\n            type=\"number\"\r\n            inputProps={{\r\n              step: 0.1,\r\n              min: 0,\r\n              max: 1,\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransitionSlider;","import React, { useState, useMemo, useCallback } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport TransitionSlider from './transitionSlider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: theme.spacing(40),\r\n    paddingLeft: theme.spacing(3),\r\n    paddingRight: theme.spacing(3),\r\n    height: \"100%\",\r\n  },\r\n  subtitle: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  inputsContainer: {\r\n    '& > *': {\r\n      marginBottom: theme.spacing(4),\r\n    },\r\n  },\r\n  buttonsContainer: {\r\n    marginTop: \"auto\",\r\n    marginBottom: theme.spacing(2),\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}));\r\n\r\nfunction NodeEditor({ node, tryUpdateNodeProbabilities, toggleDrawer }) {\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setDialogIsOpen] = useState(false);\r\n  const [transitionProbabilities, setTransitionProbabilities] = useState(node.transitionProbabilities);\r\n  const toggleDialog = useCallback(() => setDialogIsOpen(!isDialogOpen), [setDialogIsOpen, isDialogOpen]);\r\n  const handleDialogConfirm = useCallback(() => {\r\n    tryUpdateNodeProbabilities(transitionProbabilities, true)\r\n    toggleDrawer();\r\n  }, [tryUpdateNodeProbabilities, toggleDrawer, transitionProbabilities]);\r\n\r\n  const handleConfirm = useCallback(() => {\r\n    const sucess = tryUpdateNodeProbabilities(transitionProbabilities);\r\n    if (!sucess) {\r\n      toggleDialog();\r\n      return;\r\n    }\r\n    toggleDrawer();\r\n  }, [toggleDrawer, toggleDialog, tryUpdateNodeProbabilities, transitionProbabilities]);\r\n\r\n  const handleProbabilitiesChange = useMemo(() => (\r\n    Object.entries(transitionProbabilities)\r\n      .map(([label]) => newValue => {\r\n        const newTransitionProbabilities = [...transitionProbabilities];\r\n        newTransitionProbabilities[label] = parseFloat(newValue);\r\n        setTransitionProbabilities(newTransitionProbabilities);\r\n      })\r\n  ), [transitionProbabilities, setTransitionProbabilities]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.root}>\r\n        <h1>Editing Node {node.label}</h1>\r\n        <h3 className={classes.subtitle}>Transition Probabilities</h3>\r\n        <div className={classes.inputsContainer}>\r\n          {\r\n            Object.entries(transitionProbabilities)\r\n              .map(([label, p]) =>\r\n                <TransitionSlider key={label} label={label} probability={p} onChange={handleProbabilitiesChange[label]} />\r\n              )\r\n          }\r\n        </div>\r\n        <div className={classes.buttonsContainer}>\r\n          <Button onClick={toggleDrawer}>Cancel</Button>\r\n          <Button onClick={handleConfirm}>Confirm</Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Dialog\r\n        open={isDialogOpen}\r\n        onClose={toggleDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Normalize transition values?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            The inserted transition values sum is not 1.\r\n            Do you want to normalize those values and continue?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={toggleDialog} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDialogConfirm} color=\"primary\" autoFocus>\r\n            Continue\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NodeEditor;","import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\r\nimport {\r\n  Modal,\r\n  Drawer,\r\n  Button,\r\n  ButtonGroup,\r\n  makeStyles,\r\n  Slider,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\nimport _ from 'lodash';\r\n\r\nimport History from '../nodeHistory/plotHistory';\r\nimport { useMarkovChain } from '../hooks';\r\nimport NodeEditor from '../nodeEditor';\r\nimport { nodesPosition, renderNodeCanvas } from './nodeCanvasObject';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    width: \"50%\",\r\n    float: \"left\",\r\n    padding: \"20px\"\r\n  },\r\n  graphContainer: {\r\n  },\r\n  sliderContainer: {\r\n    marginBottom: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    width: 300,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    width: 600,\r\n    height: 400,\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\n\r\nfunction MarkovChain(markovChainState) {\r\n  const {\r\n    nodes,\r\n    tryUpdateNodeProbabilities,\r\n    addNode,\r\n    removeNode,\r\n    iterate,\r\n    currentNode,\r\n    resetIteration,\r\n  } = markovChainState;\r\n\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [runTimeout, setRunTimeout] = useState(null);\r\n  const [runSpeed, setRunSpeed] = useState(10);\r\n  const toggleDrawer = useCallback(() => setOpen(!open), [setOpen, open]);\r\n  const toggleModal = useCallback(() => setOpenModal(!openModal), [setOpenModal, openModal]);\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const onNodeClick = useCallback(node => {\r\n    setSelectedNode(node.id);\r\n    toggleDrawer();\r\n  }, [setSelectedNode, toggleDrawer]);\r\n  const onNodeRightClick = useCallback(node => {\r\n    setSelectedNode(node.id);\r\n    handleOpenModal();\r\n  }, [setSelectedNode, toggleModal]);\r\n  const linkWidth = useCallback(link => link.width, []);\r\n  const linkColor = useCallback(() => \"#e3e3e3\", []);\r\n  const handleSliderChange = useCallback((event, newValue) => setRunSpeed(newValue), [setRunSpeed]);\r\n  const classes = useStyles();\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const nodeEditorProps = useMemo(() => ({\r\n    node: nodes[selectedNode],\r\n    tryUpdateNodeProbabilities: (probabilities, force = false) => tryUpdateNodeProbabilities(selectedNode, probabilities, force),\r\n    toggleDrawer\r\n  }), [nodes, tryUpdateNodeProbabilities, toggleDrawer, selectedNode]);\r\n\r\n  const historyProps = useMemo(() => ({\r\n    node: nodes[selectedNode]\r\n  }), [nodes, selectedNode]);\r\n\r\n  const data = useMemo(() => ({\r\n    nodes: nodes.map(node => ({\r\n      id: node.label,\r\n      name: node.label,\r\n      isCurrentNode: node.label === currentNode.toString(),\r\n      x: nodesPosition[node.label] && nodesPosition[node.label][0],\r\n      y: nodesPosition[node.label] && nodesPosition[node.label][1]\r\n    })),\r\n    links: _.flatten(\r\n      nodes.map(node => (\r\n        Object.entries(node.transitionProbabilities)\r\n          .map(([target, p]) => ({\r\n            source: node.label,\r\n            target,\r\n            width: 5 * p,\r\n          }))\r\n          .filter(edge => edge.width > 0)\r\n      ))\r\n    )\r\n  }), [nodes, currentNode]);\r\n\r\n  const runStepRef = useRef(null);\r\n  const runStep = useCallback(() => {\r\n    if (runSpeed === 0) {\r\n      setRunTimeout(null);\r\n      return;\r\n    }\r\n\r\n    iterate();\r\n    const runTimeout = setTimeout(() => {\r\n      runStepRef.current();\r\n    }, 5000 / runSpeed);\r\n\r\n    setRunTimeout(runTimeout);\r\n  }, [iterate, setRunTimeout, runSpeed]);\r\n  runStepRef.current = runStep;\r\n\r\n  const onClickRun = useCallback(() => {\r\n    if (!_.isNull(runTimeout)) {\r\n      return;\r\n    }\r\n    runStep();\r\n  }, [runStep, runTimeout]);\r\n\r\n  const onClickStop = useCallback(() => {\r\n    setRunTimeout(null);\r\n  }, []);\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        if (_.isNull(runTimeout)) {\r\n          return;\r\n        }\r\n        clearTimeout(runTimeout);\r\n      }\r\n    }, [runTimeout, setRunTimeout]);\r\n\r\n  const modalBody = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">History of Node {selectedNode}</h2>\r\n      <p id=\"simple-modal-description\">\r\n      </p>\r\n      <History {...historyProps} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Paper className={classes.graphContainer} >\r\n        <ForceGraph2D\r\n          width={535}\r\n          height={300}\r\n          graphData={data}\r\n          onNodeClick={onNodeClick}\r\n          onNodeRightClick={onNodeRightClick}\r\n          nodeLabel=\"id\"\r\n          linkDirectionalArrowLength={3.5}\r\n          linkDirectionalArrowRelPos={1}\r\n          linkCurvature={0.25}\r\n          linkWidth={linkWidth}\r\n          nodeCanvasObject={renderNodeCanvas}\r\n          d3VelocityDecay={1}\r\n          linkColor={linkColor}\r\n        />\r\n      </Paper>\r\n      <div className={classes.sliderContainer} >\r\n        <p>Run Speed</p>\r\n        <Slider\r\n          value={runSpeed}\r\n          onChange={handleSliderChange}\r\n          aria-labelledby=\"speed-slider\"\r\n          step={1}\r\n          min={0}\r\n          max={200}\r\n        />\r\n      </div>\r\n      <div align=\"left\">\r\n        <ButtonGroup aria-label=\"outlined primary button group\">\r\n          <Button onClick={addNode}>Add Node</Button>\r\n          <Button onClick={removeNode}>Remove Node</Button>\r\n          <Button onClick={iterate}>Step</Button>\r\n          <Button onClick={onClickRun}>Run</Button>\r\n          <Button onClick={onClickStop}>Stop</Button>\r\n          <Button onClick={resetIteration}>Reset</Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <Drawer anchor=\"left\" open={open} onClose={toggleDrawer}>\r\n        <NodeEditor {...nodeEditorProps} />\r\n      </Drawer>\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleCloseModal}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {modalBody}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkovChain;","import React from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  makeStyles,\r\n  // Tooltip,\r\n} from \"@material-ui/core\"\r\n\r\nimport MarkovChain from '../markov-chain';\r\nimport { useMarkovChain } from '../hooks';\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const markovChainState = useMarkovChain();\r\n\r\n  window.markovChainState = markovChainState;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Interactive Markov Chains</h1>\r\n      <h2>State Statistics</h2>\r\n      <p>Steps: {markovChainState.totalSteps}</p>\r\n      <div className={classes.container}>\r\n        {markovChainState.nodes.length === 0\r\n          ? <div className={classes.tableContainer}>\r\n            <TableContainer component={Paper}>\r\n            </TableContainer>\r\n          </div>\r\n          : <div className={classes.tableContainer}>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align=\"left\" width=\"50\">Node</TableCell>\r\n                    <TableCell align=\"right\">Visits</TableCell>\r\n                    <TableCell align=\"right\">Visits (%)</TableCell>\r\n                    <TableCell align=\"right\">Expected (%)</TableCell>\r\n                    <TableCell align=\"right\">Expected at Equilibrium (%)</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {markovChainState.nodes.map((node) => (\r\n                    <TableRow key={node.label}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {node.label}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{node.visited.slice(-1)[0]}</TableCell>\r\n                      <TableCell align=\"right\">{(node.visited.slice(-1)[0] * 100.0 / (markovChainState.totalSteps === 0 ? 1 : markovChainState.totalSteps)).toFixed(2)}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{(markovChainState.expected[parseInt(node.label)] * 100.0).toFixed(2)}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{!markovChainState.equilibriumExists ? \"-\"\r\n                        : (markovChainState.equilibrium[parseInt(node.label)] * 100.0).toFixed(2)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        }\r\n        <MarkovChain {...markovChainState} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  tableContainer: {\r\n    width: \"50%\",\r\n    padding: \"20px\",\r\n  },\r\n  table: {\r\n    minWidth: 400,\r\n  },\r\n}));\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h2>About</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link as RouterLink,\r\n} from \"react-router-dom\";\r\nimport { Link } from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport './App.css';\r\nimport Home from './home';\r\nimport About from './about';\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <CssBaseline>\r\n        <Router>\r\n          <div className=\"pageContainer\">\r\n            <div>\r\n              <Link component={RouterLink} to=\"/\">Home</Link>\r\n              <Link component={RouterLink} to=\"/about\">About</Link>\r\n            </div>\r\n            <Switch>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </CssBaseline>\r\n    </ThemeProvider >\r\n  );\r\n\r\n}\r\n\r\nexport default hot(module)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components';\r\nimport 'fontsource-roboto';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","\r\nlet nodesPosition = {};\r\n\r\nconst renderNodeCanvas = (node, ctx, globalScale) => {\r\n  const label = node.id;\r\n  const fontSize = 4;\r\n  const nodeColor = '#3f3f3f';\r\n  const textColor = '#ffffff';\r\n\r\n  nodesPosition[node.id] = [node.x, node.y];\r\n\r\n  ctx.font = `${fontSize}px Roboto`;\r\n\r\n  ctx.fillStyle = nodeColor;\r\n  ctx.beginPath();\r\n  ctx.arc(node.x, node.y, 4.25, 0, 2 * Math.PI, false);\r\n  ctx.fill();\r\n\r\n  if (node.isCurrentNode) {\r\n    ctx.arc(node.x, node.y, 4.25, 0, 2 * Math.PI, false);\r\n    ctx.lineWidth = 0.6;\r\n    ctx.strokeStyle = textColor;\r\n    ctx.stroke();\r\n  }\r\n\r\n  // ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\r\n  ctx.fillStyle = textColor;\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText(label, node.x, node.y);\r\n}\r\n\r\nmodule.exports = {\r\n  nodesPosition,\r\n  renderNodeCanvas\r\n}"],"sourceRoot":""}