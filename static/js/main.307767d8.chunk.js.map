{"version":3,"sources":["components/nodeHistory/plotHistory.js","components/nodeEditor/transitionSlider.js","components/nodeEditor/index.js","components/markov-chain/index.js","components/utils/index.js","components/hooks/index.js","components/home/index.js","components/about/index.js","components/index.js","serviceWorker.js","index.js","components/markov-chain/nodeCanvasObject.js"],"names":["History","node","width","height","data","visited","map","timesVisited","step","name","toString","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","TransitionSlider","label","probability","onChange","handleBlur","useCallback","handleSliderChange","event","newValue","handleTextChange","target","value","Grid","container","spacing","alignItems","item","xs","Slider","aria-labelledby","min","max","TextField","variant","onBlur","inputProps","useStyles","makeStyles","theme","root","display","flexDirection","paddingLeft","paddingRight","subtitle","marginBottom","inputsContainer","buttonsContainer","marginTop","NodeEditor","tryUpdateNodeProbabilities","toggleDrawer","classes","useState","isDialogOpen","setDialogIsOpen","transitionProbabilities","setTransitionProbabilities","toggleDialog","handleDialogConfirm","handleConfirm","handleProbabilitiesChange","useMemo","Object","entries","newTransitionProbabilities","parseFloat","Fragment","className","p","key","Button","onClick","Dialog","open","onClose","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","color","autoFocus","float","padding","graphContainer","sliderContainer","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","getModalStyle","transform","MarkovChain","markovChainState","nodes","addNode","removeNode","iterate","currentNode","resetIteration","selectedNode","setSelectedNode","setOpen","openModal","setOpenModal","runTimeout","setRunTimeout","runSpeed","setRunSpeed","React","modalStyle","handleOpenModal","onNodeClick","onNodeRightClick","linkWidth","link","linkColor","nodeEditorProps","probabilities","force","historyProps","isCurrentNode","x","nodesPosition","y","links","_","flatten","source","filter","edge","runStepRef","useRef","runStep","setTimeout","current","onClickRun","isNull","onClickStop","useEffect","clearTimeout","modalBody","style","Paper","graphData","nodeLabel","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkCurvature","nodeCanvasObject","renderNodeCanvas","d3VelocityDecay","align","ButtonGroup","aria-label","Drawer","anchor","Modal","EPS","multiplyMatrixVec","a","multiplyMatrix","b","length","Error","result","Array","fill","i","j","k","matrixExp","useMarkovChain","Node","setNodes","setCurrentNode","initialNode","setInitialNode","totalSteps","total","forEach","slice","transitionMatrix","transpose","reduce","acc","push","initial","expected","equilibrium","equal","equilibriumExists","newNodes","addedNodeLabel","newNode","randVal","Math","random","prefSum","newProbabilities","sum","accumulator","currentValue","pop","test","from","keys","probs","next","parseInt","prev","window","runTest","initialVisited","this","tableContainer","table","minWidth","Home","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","scope","toFixed","About","darkTheme","createMuiTheme","App","ThemeProvider","CssBaseline","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","ctx","globalScale","font","fillStyle","beginPath","arc","PI","lineWidth","strokeStyle","textAlign","textBaseline","fillText"],"mappings":"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","file":"static/js/main.307767d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nexport default function History({ node }) {\r\n\r\n  const data = (node) => {\r\n    const visitedArray = node.visited;\r\n    return visitedArray.map((timesVisited, step) => {\r\n      return {\r\n        name: step.toString(),\r\n        \"visits/# of steps\": timesVisited / (step === 0 ? 1 : step),\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <LineChart\r\n      width={500}\r\n      height={300}\r\n      data={data(node)}\r\n      margin={{\r\n        top: 5, right: 30, left: 20, bottom: 5,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n      <Line type=\"monotone\" dataKey=\"visits/# of steps\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n    </LineChart>\r\n  );\r\n}","import React, { useCallback } from 'react';\r\nimport {\r\n  Grid,\r\n  Slider,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nfunction TransitionSlider({ label, probability, onChange }) {\r\n  const handleBlur = useCallback(() => {\r\n    if (probability < 0) {\r\n      onChange(0);\r\n    } else if (probability > 1) {\r\n      onChange(1);\r\n    }\r\n  }, [probability, onChange]);\r\n\r\n  const handleSliderChange = useCallback((event, newValue) => onChange(newValue), [onChange]);\r\n  const handleTextChange = useCallback(event => onChange(event.target.value), [onChange]);\r\n\r\n  return (\r\n    <div>\r\n      <p>Node {label}</p>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs>\r\n          <Slider\r\n            value={probability}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            step={0.01}\r\n            min={0}\r\n            max={1}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            value={probability}\r\n            variant=\"outlined\"\r\n            onChange={handleTextChange}\r\n            onBlur={handleBlur}\r\n            type=\"number\"\r\n            inputProps={{\r\n              step: 0.1,\r\n              min: 0,\r\n              max: 1,\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransitionSlider;","import React, { useState, useMemo, useCallback } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport TransitionSlider from './transitionSlider';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: theme.spacing(40),\r\n    paddingLeft: theme.spacing(3),\r\n    paddingRight: theme.spacing(3),\r\n    height: \"100%\",\r\n  },\r\n  subtitle: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  inputsContainer: {\r\n    '& > *': {\r\n      marginBottom: theme.spacing(4),\r\n    },\r\n  },\r\n  buttonsContainer: {\r\n    marginTop: \"auto\",\r\n    marginBottom: theme.spacing(2),\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}));\r\n\r\nfunction NodeEditor({ node, tryUpdateNodeProbabilities, toggleDrawer }) {\r\n  const classes = useStyles();\r\n  const [isDialogOpen, setDialogIsOpen] = useState(false);\r\n  const [transitionProbabilities, setTransitionProbabilities] = useState(node.transitionProbabilities);\r\n  const toggleDialog = useCallback(() => setDialogIsOpen(!isDialogOpen), [setDialogIsOpen, isDialogOpen]);\r\n  const handleDialogConfirm = useCallback(() => {\r\n    tryUpdateNodeProbabilities(transitionProbabilities, true)\r\n    toggleDrawer();\r\n  }, [tryUpdateNodeProbabilities, toggleDrawer, transitionProbabilities]);\r\n\r\n  const handleConfirm = useCallback(() => {\r\n    const sucess = tryUpdateNodeProbabilities(transitionProbabilities);\r\n    if (!sucess) {\r\n      toggleDialog();\r\n      return;\r\n    }\r\n    toggleDrawer();\r\n  }, [toggleDrawer, toggleDialog, tryUpdateNodeProbabilities, transitionProbabilities]);\r\n\r\n  const handleProbabilitiesChange = useMemo(() => (\r\n    Object.entries(transitionProbabilities)\r\n      .map(([label]) => newValue => {\r\n        const newTransitionProbabilities = [...transitionProbabilities];\r\n        newTransitionProbabilities[label] = parseFloat(newValue);\r\n        setTransitionProbabilities(newTransitionProbabilities);\r\n      })\r\n  ), [transitionProbabilities, setTransitionProbabilities]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.root}>\r\n        <h1>Editing Node {node.label}</h1>\r\n        <h3 className={classes.subtitle}>Transition Probabilities</h3>\r\n        <div className={classes.inputsContainer}>\r\n          {\r\n            Object.entries(transitionProbabilities)\r\n              .map(([label, p]) =>\r\n                <TransitionSlider key={label} label={label} probability={p} onChange={handleProbabilitiesChange[label]} />\r\n              )\r\n          }\r\n        </div>\r\n        <div className={classes.buttonsContainer}>\r\n          <Button onClick={toggleDrawer}>Cancel</Button>\r\n          <Button onClick={handleConfirm}>Confirm</Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Dialog\r\n        open={isDialogOpen}\r\n        onClose={toggleDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Normalize transition values?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            The inserted transition values sum is not 1.\r\n            Do you want to normalize those values and continue?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={toggleDialog} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDialogConfirm} color=\"primary\" autoFocus>\r\n            Continue\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NodeEditor;","import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\r\nimport {\r\n  Modal,\r\n  Drawer,\r\n  Button,\r\n  ButtonGroup,\r\n  makeStyles,\r\n  Slider,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\nimport _ from 'lodash';\r\n\r\nimport History from '../nodeHistory/plotHistory';\r\nimport NodeEditor from '../nodeEditor';\r\nimport { nodesPosition, renderNodeCanvas } from './nodeCanvasObject';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    width: \"50%\",\r\n    float: \"left\",\r\n    padding: \"20px\"\r\n  },\r\n  graphContainer: {\r\n  },\r\n  sliderContainer: {\r\n    marginBottom: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    width: 300,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    width: 600,\r\n    height: 400,\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\n\r\nfunction MarkovChain(markovChainState) {\r\n  const {\r\n    nodes,\r\n    tryUpdateNodeProbabilities,\r\n    addNode,\r\n    removeNode,\r\n    iterate,\r\n    currentNode,\r\n    resetIteration,\r\n  } = markovChainState;\r\n\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [runTimeout, setRunTimeout] = useState(null);\r\n  const [runSpeed, setRunSpeed] = useState(10);\r\n  const toggleDrawer = useCallback(() => setOpen(!open), [setOpen, open]);\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const handleOpenModal = useCallback(() => {\r\n    setOpenModal(true);\r\n  }, [setOpenModal]);\r\n  const onNodeClick = useCallback(node => {\r\n    setSelectedNode(node.id);\r\n    toggleDrawer();\r\n  }, [setSelectedNode, toggleDrawer]);\r\n  const onNodeRightClick = useCallback(node => {\r\n    setSelectedNode(node.id);\r\n    handleOpenModal();\r\n  }, [setSelectedNode, handleOpenModal]);\r\n  const linkWidth = useCallback(link => link.width, []);\r\n  const linkColor = useCallback(() => \"#e3e3e3\", []);\r\n  const handleSliderChange = useCallback((event, newValue) => setRunSpeed(newValue), [setRunSpeed]);\r\n  const classes = useStyles();\r\n\r\n  const handleCloseModal = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const nodeEditorProps = useMemo(() => ({\r\n    node: nodes[selectedNode],\r\n    tryUpdateNodeProbabilities: (probabilities, force = false) => tryUpdateNodeProbabilities(selectedNode, probabilities, force),\r\n    toggleDrawer\r\n  }), [nodes, tryUpdateNodeProbabilities, toggleDrawer, selectedNode]);\r\n\r\n  const historyProps = useMemo(() => ({\r\n    node: nodes[selectedNode]\r\n  }), [nodes, selectedNode]);\r\n\r\n  const data = useMemo(() => ({\r\n    nodes: nodes.map(node => ({\r\n      id: node.label,\r\n      name: node.label,\r\n      isCurrentNode: node.label === currentNode.toString(),\r\n      x: nodesPosition[node.label] && nodesPosition[node.label][0],\r\n      y: nodesPosition[node.label] && nodesPosition[node.label][1]\r\n    })),\r\n    links: _.flatten(\r\n      nodes.map(node => (\r\n        Object.entries(node.transitionProbabilities)\r\n          .map(([target, p]) => ({\r\n            source: node.label,\r\n            target,\r\n            width: 5 * p,\r\n          }))\r\n          .filter(edge => edge.width > 0)\r\n      ))\r\n    )\r\n  }), [nodes, currentNode]);\r\n\r\n  const runStepRef = useRef(null);\r\n  const runStep = useCallback(() => {\r\n    if (runSpeed === 0) {\r\n      setRunTimeout(null);\r\n      return;\r\n    }\r\n\r\n    iterate();\r\n    const runTimeout = setTimeout(() => {\r\n      runStepRef.current();\r\n    }, 5000 / runSpeed);\r\n\r\n    setRunTimeout(runTimeout);\r\n  }, [iterate, setRunTimeout, runSpeed]);\r\n  runStepRef.current = runStep;\r\n\r\n  const onClickRun = useCallback(() => {\r\n    if (!_.isNull(runTimeout)) {\r\n      return;\r\n    }\r\n    runStep();\r\n  }, [runStep, runTimeout]);\r\n\r\n  const onClickStop = useCallback(() => {\r\n    setRunTimeout(null);\r\n  }, []);\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        if (_.isNull(runTimeout)) {\r\n          return;\r\n        }\r\n        clearTimeout(runTimeout);\r\n      }\r\n    }, [runTimeout, setRunTimeout]);\r\n\r\n  const modalBody = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">History of Node {selectedNode}</h2>\r\n      <p id=\"simple-modal-description\">\r\n      </p>\r\n      <History {...historyProps} />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Paper className={classes.graphContainer} >\r\n        <ForceGraph2D\r\n          width={535}\r\n          height={300}\r\n          graphData={data}\r\n          onNodeClick={onNodeClick}\r\n          onNodeRightClick={onNodeRightClick}\r\n          nodeLabel=\"id\"\r\n          linkDirectionalArrowLength={3.5}\r\n          linkDirectionalArrowRelPos={1}\r\n          linkCurvature={0.25}\r\n          linkWidth={linkWidth}\r\n          nodeCanvasObject={renderNodeCanvas}\r\n          d3VelocityDecay={1}\r\n          linkColor={linkColor}\r\n        />\r\n      </Paper>\r\n      <div className={classes.sliderContainer} >\r\n        <p>Run Speed</p>\r\n        <Slider\r\n          value={runSpeed}\r\n          onChange={handleSliderChange}\r\n          aria-labelledby=\"speed-slider\"\r\n          step={1}\r\n          min={0}\r\n          max={200}\r\n        />\r\n      </div>\r\n      <div align=\"left\">\r\n        <ButtonGroup aria-label=\"outlined primary button group\">\r\n          <Button onClick={addNode}>Add Node</Button>\r\n          <Button onClick={removeNode}>Remove Node</Button>\r\n          <Button onClick={iterate}>Step</Button>\r\n          <Button onClick={onClickRun}>Run</Button>\r\n          <Button onClick={onClickStop}>Stop</Button>\r\n          <Button onClick={resetIteration}>Reset</Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <Drawer anchor=\"left\" open={open} onClose={toggleDrawer}>\r\n        <NodeEditor {...nodeEditorProps} />\r\n      </Drawer>\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleCloseModal}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {modalBody}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarkovChain;","export const EPS = 1e-6;\r\nexport const INF = 1e6;\r\n\r\nexport function multiplyMatrixVec(a, x) {\r\n  const b = x.map(y => [y]);\r\n  return multiplyMatrix(a, b).map(x => x[0]);\r\n}\r\n\r\nexport function multiplyMatrix(a, b) {\r\n  if (a[0].length !== b.length) {\r\n    throw Error(\"Algo de errado nao esta certo\");\r\n  }\r\n\r\n  const result = Array(a.length)\r\n    .fill([])\r\n    .map(() => Array(b[0].length).fill(0));\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    for (let j = 0; j < b[0].length; j++) {\r\n      for (let k = 0; k < b.length; k++) {\r\n        result[i][j] += a[i][k] * b[k][j];\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function matrixExp(a, b) {\r\n  if (a.length === 0 || a.length !== a[0].length) {\r\n    throw Error(\"Algo de errado nao esta certo, so q na exponencial\");\r\n  }\r\n\r\n  const length = a.length;\r\n  let result = Array(length)\r\n    .fill([])\r\n    .map(() => Array(length).fill(0));\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    result[i][i] = 1;\r\n  }\r\n\r\n  while (b > 0) {\r\n    if (b % 2 === 0) {\r\n      a = multiplyMatrix(a, a);\r\n      b /= 2;\r\n      continue;\r\n    }\r\n    result = multiplyMatrix(result, a);\r\n    b--;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function transpose(a) {\r\n  if (a.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const result = Array(a[0].length)\r\n    .fill([])\r\n    .map(() => Array(a.length).fill(0));\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    for (let j = 0; j < a[0].length; j++) {\r\n      result[j][i] = a[i][j];\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function equal(a, b) {\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    if (a[i] + EPS < b[i] || a[i] - EPS > b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { useState, useCallback, useMemo, useEffect } from 'react';\r\n\r\nimport { matrixExp, transpose, EPS, INF, equal, multiplyMatrixVec } from '../utils';\r\n\r\nexport function useMarkovChain() {\r\n  const [nodes, setNodes] = useState([new Node(0, 1)]);\r\n  const [currentNode, setCurrentNode] = useState(0);\r\n  const [initialNode, setInitialNode] = useState(0);\r\n\r\n  const totalSteps = useMemo(() => {\r\n    let total = 0;\r\n    nodes.forEach(node => {\r\n      total += node.visited.slice(-1)[0];\r\n    });\r\n    return total - 1;\r\n  }, [nodes]);\r\n\r\n  useEffect(() => {\r\n    if (totalSteps === 0) {\r\n      setInitialNode(currentNode);\r\n    }\r\n  }, [totalSteps, initialNode, currentNode]);\r\n\r\n  const [expected, equilibrium, equilibriumExists] = useMemo(() => {\r\n    // Calc Matrix\r\n    const transitionMatrix = transpose(nodes\r\n      .reduce((acc, node) => {\r\n        acc.push(node.transitionProbabilities);\r\n        return acc;\r\n      }, [])\r\n    );\r\n\r\n    const initial = Array(nodes.length).fill(0);\r\n    initial[initialNode] = 1;\r\n\r\n    const expected = multiplyMatrixVec(matrixExp(transitionMatrix, totalSteps), initial);\r\n    const equilibrium = multiplyMatrixVec(matrixExp(transitionMatrix, INF), initial);\r\n    const equilibriumExists = equal(equilibrium, multiplyMatrixVec(transitionMatrix, equilibrium));\r\n\r\n    return [expected, equilibrium, equilibriumExists];\r\n  }, [nodes, totalSteps, initialNode]);\r\n\r\n  const resetIteration = useCallback(() => {\r\n    const newNodes = [...nodes].map(node => (\r\n      { ...node, visited: [(node.label === \"0\" ? 1 : 0)] }\r\n    ));\r\n    setNodes(newNodes);\r\n    setCurrentNode(0);\r\n  }, [nodes]);\r\n\r\n  const addNode = useCallback(() => {\r\n    const addedNodeLabel = nodes.length;\r\n    const newNodes = [...nodes]\r\n      .map(node => {\r\n        const newNode = { ...node, transitionProbabilities: [...node.transitionProbabilities] }\r\n        newNode.transitionProbabilities[addedNodeLabel] = 0;\r\n        newNode.visited = [(newNode.label === \"0\" ? 1 : 0)];\r\n        return newNode;\r\n      });\r\n\r\n    newNodes.push(new Node(addedNodeLabel));\r\n    setCurrentNode(0);\r\n    setNodes(newNodes);\r\n  }, [nodes]);\r\n\r\n  const iterate = useCallback(() => {\r\n    const randVal = Math.random();\r\n    let prefSum = 0;\r\n\r\n    const probabilities = nodes[currentNode].transitionProbabilities;\r\n    for (const label in probabilities) {\r\n      prefSum += probabilities[label];\r\n      if (prefSum > randVal + EPS) {\r\n        const newNodes = [...nodes].map(node => {\r\n          const newNode = { ...node };\r\n          newNode.visited.push(newNode.visited.slice(-1)[0] + (newNode.label === label));\r\n          return newNode;\r\n        });\r\n\r\n        setNodes(newNodes);\r\n        setCurrentNode(label);\r\n        return;\r\n      }\r\n    }\r\n\r\n    throw new Error(\"Iterate couldn't find the next node\");\r\n  }, [nodes, currentNode]);\r\n\r\n  const tryUpdateNodeProbabilities = useCallback((label, newProbabilities, force = false) => {\r\n    const newNodes = [...nodes];\r\n\r\n    // Normalizing Step\r\n    let sum = newProbabilities.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n\r\n    if (force) {\r\n      for (const label in newProbabilities) {\r\n        newProbabilities[label] /= sum;\r\n      }\r\n      sum = 1;\r\n    }\r\n\r\n    const newNode = { ...newNodes[label] };\r\n    newNode.transitionProbabilities = newProbabilities;\r\n    newNodes[label] = newNode;\r\n\r\n    if (sum + EPS < 1 || sum - EPS > 1) {\r\n      return false;\r\n    }\r\n\r\n    setNodes(newNodes);\r\n    return true;\r\n  }, [nodes]);\r\n\r\n  const removeNode = useCallback(() => {\r\n    if (nodes.length === 1) {\r\n      return;\r\n    }\r\n    setCurrentNode(0);\r\n\r\n    const newNodes = nodes.slice(0, -1)\r\n      .map(node => {\r\n        const newNode = { ...node };\r\n        let transitionProbabilities = [...node.transitionProbabilities];\r\n        transitionProbabilities.pop();\r\n\r\n        let sum = transitionProbabilities.reduce((accumulator, currentValue) => accumulator + currentValue);\r\n        if (sum + EPS < 1 || sum - EPS > 1) {\r\n          if (sum === 0) {\r\n            transitionProbabilities[newNode.label] = 1;\r\n            sum = 1;\r\n          }\r\n          transitionProbabilities = transitionProbabilities.map(p => p /= sum);\r\n        }\r\n\r\n        newNode.transitionProbabilities = transitionProbabilities;\r\n        newNode.visited = [newNode.label === \"0\" ? 1 : 0];\r\n        return newNode;\r\n      });\r\n\r\n    setNodes(newNodes);\r\n  }, [nodes]);\r\n\r\n  const test = useCallback(() => {\r\n    const length = 5;\r\n    const newNodes = Array\r\n      .from(Array(length).keys())\r\n      .map(label => {\r\n        const node = new Node(label, (label === 0 ? 1 : 0));\r\n        const probs = Array(length).fill(0);\r\n        const next = (parseInt(node.label) + 1) % length;\r\n        const prev = (parseInt(node.label) - 1 + length) % length;\r\n\r\n        probs[next] = 0.5;\r\n        probs[prev] = 0.5;\r\n        node.transitionProbabilities = probs;\r\n\r\n        return node;\r\n      });\r\n\r\n    setNodes(newNodes);\r\n  }, []);\r\n  window.runTest = test;\r\n\r\n  return {\r\n    totalSteps,\r\n    nodes,\r\n    currentNode,\r\n    expected,\r\n    equilibrium,\r\n    equilibriumExists,\r\n    resetIteration,\r\n    setCurrentNode,\r\n    addNode,\r\n    removeNode,\r\n    iterate,\r\n    test,\r\n    tryUpdateNodeProbabilities,\r\n  };\r\n}\r\n\r\nclass Node {\r\n  constructor(label, initialVisited = 0) {\r\n    this.label = label.toString();\r\n    this.visited = [initialVisited];\r\n    this.transitionProbabilities = new Array(label + 1).fill(0);\r\n    this.transitionProbabilities[label] = 1;\r\n  }\r\n}","import React from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  makeStyles,\r\n  // Tooltip,\r\n} from \"@material-ui/core\"\r\n\r\nimport MarkovChain from '../markov-chain';\r\nimport { useMarkovChain } from '../hooks';\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const markovChainState = useMarkovChain();\r\n\r\n  window.markovChainState = markovChainState;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Interactive Markov Chains</h1>\r\n      <h2>State Statistics</h2>\r\n      <p>Steps: {markovChainState.totalSteps}</p>\r\n      <div className={classes.container}>\r\n        {markovChainState.nodes.length === 0\r\n          ? <div className={classes.tableContainer}>\r\n            <TableContainer component={Paper}>\r\n            </TableContainer>\r\n          </div>\r\n          : <div className={classes.tableContainer}>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align=\"left\" width=\"50\">Node</TableCell>\r\n                    <TableCell align=\"right\">Visits</TableCell>\r\n                    <TableCell align=\"right\">Visits (%)</TableCell>\r\n                    <TableCell align=\"right\">Expected (%)</TableCell>\r\n                    <TableCell align=\"right\">Expected at Equilibrium (%)</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {markovChainState.nodes.map((node) => (\r\n                    <TableRow key={node.label}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {node.label}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{node.visited.slice(-1)[0]}</TableCell>\r\n                      <TableCell align=\"right\">{(node.visited.slice(-1)[0] * 100.0 / (markovChainState.totalSteps + 1)).toFixed(2)}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{(markovChainState.expected[parseInt(node.label)] * 100.0).toFixed(2)}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{!markovChainState.equilibriumExists ? \"-\"\r\n                        : (markovChainState.equilibrium[parseInt(node.label)] * 100.0).toFixed(2)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        }\r\n        <MarkovChain {...markovChainState} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  tableContainer: {\r\n    width: \"50%\",\r\n    padding: \"20px\",\r\n  },\r\n  table: {\r\n    minWidth: 400,\r\n  },\r\n}));\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h2>About</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  // Link as RouterLink,\r\n} from \"react-router-dom\";\r\n// import { Link } from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport './App.css';\r\nimport Home from './home';\r\nimport About from './about';\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <CssBaseline>\r\n        <Router>\r\n          <div className=\"pageContainer\">\r\n            {/*\r\n            <div>\r\n              <Link component={RouterLink} to=\"/\">Home</Link>\r\n              <Link component={RouterLink} to=\"/about\">About</Link>\r\n            </div>\r\n            */}\r\n            <Switch>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </CssBaseline>\r\n    </ThemeProvider >\r\n  );\r\n\r\n}\r\n\r\nexport default hot(module)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components';\r\nimport 'fontsource-roboto';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","\r\nlet nodesPosition = {};\r\n\r\nconst renderNodeCanvas = (node, ctx, globalScale) => {\r\n  const label = node.id;\r\n  const fontSize = 4;\r\n  const nodeColor = '#3f3f3f';\r\n  const textColor = '#ffffff';\r\n\r\n  nodesPosition[node.id] = [node.x, node.y];\r\n\r\n  ctx.font = `${fontSize}px Roboto`;\r\n\r\n  ctx.fillStyle = nodeColor;\r\n  ctx.beginPath();\r\n  ctx.arc(node.x, node.y, 4.25, 0, 2 * Math.PI, false);\r\n  ctx.fill();\r\n\r\n  if (node.isCurrentNode) {\r\n    ctx.arc(node.x, node.y, 4.25, 0, 2 * Math.PI, false);\r\n    ctx.lineWidth = 0.6;\r\n    ctx.strokeStyle = textColor;\r\n    ctx.stroke();\r\n  }\r\n\r\n  // ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\r\n  ctx.fillStyle = textColor;\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText(label, node.x, node.y);\r\n}\r\n\r\nmodule.exports = {\r\n  nodesPosition,\r\n  renderNodeCanvas\r\n}"],"sourceRoot":""}